webpackHotUpdate_N_E("pages/index",{

/***/ "./node_modules/@firebase/functions/dist/index.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@firebase/functions/dist/index.esm.js ***!
  \************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"./node_modules/@firebase/app/dist/index.esm.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/component */ \"./node_modules/@firebase/component/dist/index.esm.js\");\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\r\nvar errorCodeMap = {\r\n    OK: 'ok',\r\n    CANCELLED: 'cancelled',\r\n    UNKNOWN: 'unknown',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    NOT_FOUND: 'not-found',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    ABORTED: 'aborted',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    INTERNAL: 'internal',\r\n    UNAVAILABLE: 'unavailable',\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\r\nvar HttpsErrorImpl = /** @class */ (function (_super) {\r\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__extends\"])(HttpsErrorImpl, _super);\r\n    function HttpsErrorImpl(code, message, details) {\r\n        var _this = _super.call(this, message) || this;\r\n        // This is a workaround for a bug in TypeScript when extending Error:\r\n        // tslint:disable-next-line\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\r\n        _this.code = code;\r\n        _this.details = details;\r\n        return _this;\r\n    }\r\n    return HttpsErrorImpl;\r\n}(Error));\r\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\r\nfunction codeForHTTPStatus(status) {\r\n    // Make sure any successful status is OK.\r\n    if (status >= 200 && status < 300) {\r\n        return 'ok';\r\n    }\r\n    switch (status) {\r\n        case 0:\r\n            // This can happen if the server returns 500.\r\n            return 'internal';\r\n        case 400:\r\n            return 'invalid-argument';\r\n        case 401:\r\n            return 'unauthenticated';\r\n        case 403:\r\n            return 'permission-denied';\r\n        case 404:\r\n            return 'not-found';\r\n        case 409:\r\n            return 'aborted';\r\n        case 429:\r\n            return 'resource-exhausted';\r\n        case 499:\r\n            return 'cancelled';\r\n        case 500:\r\n            return 'internal';\r\n        case 501:\r\n            return 'unimplemented';\r\n        case 503:\r\n            return 'unavailable';\r\n        case 504:\r\n            return 'deadline-exceeded';\r\n    }\r\n    return 'unknown';\r\n}\r\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\r\nfunction _errorForResponse(status, bodyJSON, serializer) {\r\n    var code = codeForHTTPStatus(status);\r\n    // Start with reasonable defaults from the status code.\r\n    var description = code;\r\n    var details = undefined;\r\n    // Then look through the body for explicit details.\r\n    try {\r\n        var errorJSON = bodyJSON && bodyJSON.error;\r\n        if (errorJSON) {\r\n            var status_1 = errorJSON.status;\r\n            if (typeof status_1 === 'string') {\r\n                if (!errorCodeMap[status_1]) {\r\n                    // They must've included an unknown error code in the body.\r\n                    return new HttpsErrorImpl('internal', 'internal');\r\n                }\r\n                code = errorCodeMap[status_1];\r\n                // TODO(klimt): Add better default descriptions for error enums.\r\n                // The default description needs to be updated for the new code.\r\n                description = status_1;\r\n            }\r\n            var message = errorJSON.message;\r\n            if (typeof message === 'string') {\r\n                description = message;\r\n            }\r\n            details = errorJSON.details;\r\n            if (details !== undefined) {\r\n                details = serializer.decode(details);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // If we couldn't parse explicit error data, that's fine.\r\n    }\r\n    if (code === 'ok') {\r\n        // Technically, there's an edge case where a developer could explicitly\r\n        // return an error code of OK, and we will treat it as success, but that\r\n        // seems reasonable.\r\n        return null;\r\n    }\r\n    return new HttpsErrorImpl(code, description, details);\r\n}\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\r\nvar ContextProvider = /** @class */ (function () {\r\n    function ContextProvider(authProvider, messagingProvider) {\r\n        var _this = this;\r\n        this.auth = null;\r\n        this.messaging = null;\r\n        this.auth = authProvider.getImmediate({ optional: true });\r\n        this.messaging = messagingProvider.getImmediate({\r\n            optional: true\r\n        });\r\n        if (!this.auth) {\r\n            authProvider.get().then(function (auth) { return (_this.auth = auth); }, function () {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.messaging) {\r\n            messagingProvider.get().then(function (messaging) { return (_this.messaging = messaging); }, function () {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n    }\r\n    ContextProvider.prototype.getAuthToken = function () {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var token, e_1;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.auth) {\r\n                            return [2 /*return*/, undefined];\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.auth.getToken()];\r\n                    case 2:\r\n                        token = _a.sent();\r\n                        if (!token) {\r\n                            return [2 /*return*/, undefined];\r\n                        }\r\n                        return [2 /*return*/, token.accessToken];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        // If there's any error when trying to get the auth token, leave it off.\r\n                        return [2 /*return*/, undefined];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ContextProvider.prototype.getInstanceIdToken = function () {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_a) {\r\n                if (!this.messaging ||\r\n                    !('Notification' in self) ||\r\n                    Notification.permission !== 'granted') {\r\n                    return [2 /*return*/, undefined];\r\n                }\r\n                try {\r\n                    return [2 /*return*/, this.messaging.getToken()];\r\n                }\r\n                catch (e) {\r\n                    // We don't warn on this, because it usually means messaging isn't set up.\r\n                    // console.warn('Failed to retrieve instance id token.', e);\r\n                    // If there's any error when trying to get the token, leave it off.\r\n                    return [2 /*return*/, undefined];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    ContextProvider.prototype.getContext = function () {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var authToken, instanceIdToken;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getAuthToken()];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        return [4 /*yield*/, this.getInstanceIdToken()];\r\n                    case 2:\r\n                        instanceIdToken = _a.sent();\r\n                        return [2 /*return*/, { authToken: authToken, instanceIdToken: instanceIdToken }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return ContextProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\nfunction mapValues(\r\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no, f) {\r\n    var result = {};\r\n    for (var key in o) {\r\n        if (o.hasOwnProperty(key)) {\r\n            result[key] = f(o[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar Serializer = /** @class */ (function () {\r\n    function Serializer() {\r\n    }\r\n    // Takes data and encodes it in a JSON-friendly way, such that types such as\r\n    // Date are preserved.\r\n    Serializer.prototype.encode = function (data) {\r\n        var _this = this;\r\n        if (data == null) {\r\n            return null;\r\n        }\r\n        if (data instanceof Number) {\r\n            data = data.valueOf();\r\n        }\r\n        if (typeof data === 'number' && isFinite(data)) {\r\n            // Any number in JS is safe to put directly in JSON and parse as a double\r\n            // without any loss of precision.\r\n            return data;\r\n        }\r\n        if (data === true || data === false) {\r\n            return data;\r\n        }\r\n        if (Object.prototype.toString.call(data) === '[object String]') {\r\n            return data;\r\n        }\r\n        if (Array.isArray(data)) {\r\n            return data.map(function (x) { return _this.encode(x); });\r\n        }\r\n        if (typeof data === 'function' || typeof data === 'object') {\r\n            return mapValues(data, function (x) { return _this.encode(x); });\r\n        }\r\n        // If we got this far, the data is not encodable.\r\n        throw new Error('Data cannot be encoded in JSON: ' + data);\r\n    };\r\n    // Takes data that's been encoded in a JSON-friendly form and returns a form\r\n    // with richer datatypes, such as Dates, etc.\r\n    Serializer.prototype.decode = function (json) {\r\n        var _this = this;\r\n        if (json == null) {\r\n            return json;\r\n        }\r\n        if (json['@type']) {\r\n            switch (json['@type']) {\r\n                case LONG_TYPE:\r\n                // Fall through and handle this the same as unsigned.\r\n                case UNSIGNED_LONG_TYPE: {\r\n                    // Technically, this could work return a valid number for malformed\r\n                    // data if there was a number followed by garbage. But it's just not\r\n                    // worth all the extra code to detect that case.\r\n                    var value = Number(json['value']);\r\n                    if (isNaN(value)) {\r\n                        throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                    }\r\n                    return value;\r\n                }\r\n                default: {\r\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                }\r\n            }\r\n        }\r\n        if (Array.isArray(json)) {\r\n            return json.map(function (x) { return _this.decode(x); });\r\n        }\r\n        if (typeof json === 'function' || typeof json === 'object') {\r\n            return mapValues(json, function (x) { return _this.decode(x); });\r\n        }\r\n        // Anything else is safe to return.\r\n        return json;\r\n    };\r\n    return Serializer;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\r\nfunction failAfter(millis) {\r\n    var timer;\r\n    var promise = new Promise(function (_, reject) {\r\n        timer = setTimeout(function () {\r\n            reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\r\n        }, millis);\r\n    });\r\n    return {\r\n        timer: timer,\r\n        promise: promise\r\n    };\r\n}\r\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\r\nvar Service = /** @class */ (function () {\r\n    /**\r\n     * Creates a new Functions service for the given app and (optional) region or custom domain.\r\n     * @param app_ The FirebaseApp to use.\r\n     * @param regionOrCustomDomain_ one of:\r\n     *   a) A region to call functions from, such as us-central1\r\n     *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\r\n     */\r\n    function Service(app_, authProvider, messagingProvider, regionOrCustomDomain_, fetchImpl) {\r\n        var _this = this;\r\n        if (regionOrCustomDomain_ === void 0) { regionOrCustomDomain_ = 'us-central1'; }\r\n        this.app_ = app_;\r\n        this.fetchImpl = fetchImpl;\r\n        this.serializer = new Serializer();\r\n        this.emulatorOrigin = null;\r\n        this.INTERNAL = {\r\n            delete: function () {\r\n                return Promise.resolve(_this.deleteService());\r\n            }\r\n        };\r\n        this.contextProvider = new ContextProvider(authProvider, messagingProvider);\r\n        // Cancels all ongoing requests when resolved.\r\n        this.cancelAllRequests = new Promise(function (resolve) {\r\n            _this.deleteService = function () {\r\n                return resolve();\r\n            };\r\n        });\r\n        // Resolve the region or custom domain overload by attempting to parse it.\r\n        try {\r\n            var url = new URL(regionOrCustomDomain_);\r\n            this.customDomain = url.origin;\r\n            this.region = 'us-central1';\r\n        }\r\n        catch (e) {\r\n            this.customDomain = null;\r\n            this.region = regionOrCustomDomain_;\r\n        }\r\n    }\r\n    Object.defineProperty(Service.prototype, \"app\", {\r\n        get: function () {\r\n            return this.app_;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name The name of the callable.\r\n     */\r\n    Service.prototype._url = function (name) {\r\n        var projectId = this.app_.options.projectId;\r\n        if (this.emulatorOrigin !== null) {\r\n            var origin_1 = this.emulatorOrigin;\r\n            return origin_1 + \"/\" + projectId + \"/\" + this.region + \"/\" + name;\r\n        }\r\n        if (this.customDomain !== null) {\r\n            return this.customDomain + \"/\" + name;\r\n        }\r\n        return \"https://\" + this.region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\r\n    };\r\n    /**\r\n     * Modify this instance to communicate with the Cloud Functions emulator.\r\n     *\r\n     * Note: this must be called before this instance has been used to do any operations.\r\n     *\r\n     * @param host The emulator host (ex: localhost)\r\n     * @param port The emulator port (ex: 5001)\r\n     */\r\n    Service.prototype.useEmulator = function (host, port) {\r\n        this.emulatorOrigin = \"http://\" + host + \":\" + port;\r\n    };\r\n    /**\r\n     * Changes this instance to point to a Cloud Functions emulator running\r\n     * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n     *\r\n     * @deprecated Prefer the useEmulator(host, port) method.\r\n     * @param origin The origin of the local emulator, such as\r\n     * \"http://localhost:5005\".\r\n     */\r\n    Service.prototype.useFunctionsEmulator = function (origin) {\r\n        this.emulatorOrigin = origin;\r\n    };\r\n    /**\r\n     * Returns a reference to the callable https trigger with the given name.\r\n     * @param name The name of the trigger.\r\n     */\r\n    Service.prototype.httpsCallable = function (name, options) {\r\n        var _this = this;\r\n        return function (data) {\r\n            return _this.call(name, data, options || {});\r\n        };\r\n    };\r\n    /**\r\n     * Does an HTTP POST and returns the completed response.\r\n     * @param url The url to post to.\r\n     * @param body The JSON body of the post.\r\n     * @param headers The HTTP headers to include in the request.\r\n     * @return A Promise that will succeed when the request finishes.\r\n     */\r\n    Service.prototype.postJSON = function (url, body, headers) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var response, e_1, json, e_2;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        headers['Content-Type'] = 'application/json';\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.fetchImpl(url, {\r\n                                method: 'POST',\r\n                                body: JSON.stringify(body),\r\n                                headers: headers\r\n                            })];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        // This could be an unhandled error on the backend, or it could be a\r\n                        // network error. There's no way to know, since an unhandled error on the\r\n                        // backend will fail to set the proper CORS header, and thus will be\r\n                        // treated as a network error by fetch.\r\n                        return [2 /*return*/, {\r\n                                status: 0,\r\n                                json: null\r\n                            }];\r\n                    case 4:\r\n                        json = null;\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        _a.trys.push([5, 7, , 8]);\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 6:\r\n                        json = _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 7:\r\n                        e_2 = _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 8: return [2 /*return*/, {\r\n                            status: response.status,\r\n                            json: json\r\n                        }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Calls a callable function asynchronously and returns the result.\r\n     * @param name The name of the callable trigger.\r\n     * @param data The data to pass as params to the function.s\r\n     */\r\n    Service.prototype.call = function (name, data, options) {\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n            var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\r\n            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        url = this._url(name);\r\n                        // Encode any special types, such as dates, in the input data.\r\n                        data = this.serializer.encode(data);\r\n                        body = { data: data };\r\n                        headers = {};\r\n                        return [4 /*yield*/, this.contextProvider.getContext()];\r\n                    case 1:\r\n                        context = _b.sent();\r\n                        if (context.authToken) {\r\n                            headers['Authorization'] = 'Bearer ' + context.authToken;\r\n                        }\r\n                        if (context.instanceIdToken) {\r\n                            headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\r\n                        }\r\n                        timeout = options.timeout || 70000;\r\n                        _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\r\n                        return [4 /*yield*/, Promise.race([\r\n                                clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\r\n                                failAfterPromise,\r\n                                clearTimeoutWrapper(timer, this.cancelAllRequests)\r\n                            ])];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        // If service was deleted, interrupted response throws an error.\r\n                        if (!response) {\r\n                            throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\r\n                        }\r\n                        error = _errorForResponse(response.status, response.json, this.serializer);\r\n                        if (error) {\r\n                            throw error;\r\n                        }\r\n                        if (!response.json) {\r\n                            throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\r\n                        }\r\n                        responseData = response.json.data;\r\n                        // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n                        // backwards compatibility.\r\n                        if (typeof responseData === 'undefined') {\r\n                            responseData = response.json.result;\r\n                        }\r\n                        if (typeof responseData === 'undefined') {\r\n                            // Consider the response malformed.\r\n                            throw new HttpsErrorImpl('internal', 'Response is missing data field.');\r\n                        }\r\n                        decodedData = this.serializer.decode(responseData);\r\n                        return [2 /*return*/, { data: decodedData }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Service;\r\n}());\r\nfunction clearTimeoutWrapper(timer, promise) {\r\n    return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__awaiter\"])(this, void 0, void 0, function () {\r\n        var result;\r\n        return Object(tslib__WEBPACK_IMPORTED_MODULE_1__[\"__generator\"])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, promise];\r\n                case 1:\r\n                    result = _a.sent();\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    clearTimeout(timer);\r\n                    return [2 /*return*/, result];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Functions.\r\n */\r\nvar FUNCTIONS_TYPE = 'functions';\r\nfunction registerFunctions(instance, fetchImpl) {\r\n    var namespaceExports = {\r\n        // no-inline\r\n        Functions: Service\r\n    };\r\n    function factory(container, _a) {\r\n        var regionOrCustomDomain = _a.instanceIdentifier;\r\n        // Dependencies\r\n        var app = container.getProvider('app').getImmediate();\r\n        var authProvider = container.getProvider('auth-internal');\r\n        var messagingProvider = container.getProvider('messaging');\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return new Service(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);\r\n    }\r\n    instance.INTERNAL.registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_2__[\"Component\"](FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n}\n\nvar name = \"@firebase/functions\";\nvar version = \"0.6.7\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterFunctions(_firebase_app__WEBPACK_IMPORTED_MODULE_0__[\"default\"], fetch.bind(self));\r\n_firebase_app__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerVersion(name, version);\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@firebase/functions/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/firebase/functions/dist/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/firebase/functions/dist/index.esm.js ***!
  \***********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _firebase_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/functions */ \"./node_modules/@firebase/functions/dist/index.esm.js\");\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2Z1bmN0aW9ucy9kaXN0L2luZGV4LmVzbS5qcz84OTM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBNkI7QUFDN0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvZnVuY3Rpb25zL2Rpc3QvaW5kZXguZXNtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAZmlyZWJhc2UvZnVuY3Rpb25zJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/firebase/functions/dist/index.esm.js\n");

/***/ }),

/***/ "./src/templates/home.tsx":
/*!********************************!*\
  !*** ./src/templates/home.tsx ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _stores_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/stores/auth */ \"./src/stores/auth.ts\");\n/* harmony import */ var recoil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! recoil */ \"./node_modules/recoil/es/recoil.js\");\n/* harmony import */ var _modules_firebase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/modules/firebase */ \"./src/modules/firebase.ts\");\n/* harmony import */ var firebase_functions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! firebase/functions */ \"./node_modules/firebase/functions/dist/index.esm.js\");\n\n\n\nvar _jsxFileName = \"/Users/teranyan/workspace/OrangeJuiceWeb/src/templates/home.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\nvar Template = function Template() {\n  _s();\n\n  var uid = Object(recoil__WEBPACK_IMPORTED_MODULE_3__[\"useRecoilValue\"])(_stores_auth__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(''),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(''),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var signIn = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useCallback\"])(function () {\n    _modules_firebase__WEBPACK_IMPORTED_MODULE_4__[\"default\"].auth().signInWithEmailAndPassword(email, password);\n  }, [email, password]);\n  var getToken = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useCallback\"])(function () {\n    _modules_firebase__WEBPACK_IMPORTED_MODULE_4__[\"default\"].functions().httpsCallable(\"http-sessionCookie\");\n  }, []);\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n    children: uid ? /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"button\", {\n        onClick: getToken,\n        children: \"get token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 3\n      }, _this), \" \"]\n    }, void 0, true) : /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"input\", {\n        type: \"mail\",\n        placeholder: \"mail\",\n        onChange: function onChange(e) {\n          return setEmail(e.target.value);\n        },\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        onChange: function onChange(e) {\n          return setPassword(e.target.value);\n        },\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"button\", {\n        onClick: signIn,\n        children: \"signin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 3\n      }, _this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(Template, \"4YAQJBkyi1DqzqeVdVCF3FbqHt0=\", false, function () {\n  return [recoil__WEBPACK_IMPORTED_MODULE_3__[\"useRecoilValue\"]];\n});\n\n_c = Template;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Template);\n\nvar _c;\n\n$RefreshReg$(_c, \"Template\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3RlbXBsYXRlcy9ob21lLnRzeD85MmVmIl0sIm5hbWVzIjpbIlRlbXBsYXRlIiwidWlkIiwidXNlUmVjb2lsVmFsdWUiLCJhdXRoU3RhdGUiLCJ1c2VTdGF0ZSIsImVtYWlsIiwic2V0RW1haWwiLCJwYXNzd29yZCIsInNldFBhc3N3b3JkIiwic2lnbkluIiwidXNlQ2FsbGJhY2siLCJmaXJlYmFzZSIsImF1dGgiLCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCIsImdldFRva2VuIiwiZnVuY3Rpb25zIiwiaHR0cHNDYWxsYWJsZSIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsUUFBWSxHQUFHLFNBQWZBLFFBQWUsR0FBTTtBQUFBOztBQUN6QixNQUFNQyxHQUFHLEdBQUdDLDZEQUFjLENBQUNDLG9EQUFELENBQTFCOztBQUR5QixrQkFFQ0Msc0RBQVEsQ0FBQyxFQUFELENBRlQ7QUFBQSxNQUVsQkMsS0FGa0I7QUFBQSxNQUVYQyxRQUZXOztBQUFBLG1CQUdPRixzREFBUSxDQUFDLEVBQUQsQ0FIZjtBQUFBLE1BR2xCRyxRQUhrQjtBQUFBLE1BR1JDLFdBSFE7O0FBSXpCLE1BQU1DLE1BQU0sR0FBR0MseURBQVcsQ0FBQyxZQUFJO0FBQzdCQyw2REFBUSxDQUFDQyxJQUFULEdBQWdCQywwQkFBaEIsQ0FBMkNSLEtBQTNDLEVBQWtERSxRQUFsRDtBQUNELEdBRnlCLEVBRXhCLENBQUNGLEtBQUQsRUFBUUUsUUFBUixDQUZ3QixDQUExQjtBQUdBLE1BQU1PLFFBQVEsR0FBR0oseURBQVcsQ0FBQyxZQUFJO0FBQy9CQyw2REFBUSxDQUFDSSxTQUFULEdBQXFCQyxhQUFyQixDQUFtQyxvQkFBbkM7QUFDRCxHQUYyQixFQUUxQixFQUYwQixDQUE1QjtBQUdBLHNCQUFPO0FBQUEsY0FBR2YsR0FBRyxnQkFBRztBQUFBLDhCQUNoQjtBQUFRLGVBQU8sRUFBRWEsUUFBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFEZ0I7QUFBQSxvQkFBSCxnQkFDdUM7QUFBQSw4QkFDcEQ7QUFBTyxZQUFJLEVBQUMsTUFBWjtBQUFtQixtQkFBVyxFQUFDLE1BQS9CO0FBQXNDLGdCQUFRLEVBQUUsa0JBQUFHLENBQUM7QUFBQSxpQkFBRVgsUUFBUSxDQUFDVyxDQUFDLENBQUNDLE1BQUYsQ0FBU0MsS0FBVixDQUFWO0FBQUEsU0FBakQ7QUFBNkUsYUFBSyxFQUFFZDtBQUFwRjtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBRG9ELGVBRXBEO0FBQU8sWUFBSSxFQUFDLFVBQVo7QUFBdUIsbUJBQVcsRUFBQyxVQUFuQztBQUE4QyxnQkFBUSxFQUFFLGtCQUFBWSxDQUFDO0FBQUEsaUJBQUVULFdBQVcsQ0FBQ1MsQ0FBQyxDQUFDQyxNQUFGLENBQVNDLEtBQVYsQ0FBYjtBQUFBLFNBQXpEO0FBQXdGLGFBQUssRUFBRVo7QUFBL0Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUZvRCxlQUdwRDtBQUFRLGVBQU8sRUFBRUUsTUFBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFIb0Q7QUFBQTtBQUQ3QyxtQkFBUDtBQU1ELENBaEJEOztHQUFNVCxRO1VBQ1FFLHFEOzs7S0FEUkYsUTtBQWtCU0EsdUVBQWYiLCJmaWxlIjoiLi9zcmMvdGVtcGxhdGVzL2hvbWUudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRkMsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGF1dGhTdGF0ZSBmcm9tICd+L3N0b3Jlcy9hdXRoJ1xuaW1wb3J0IHsgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnXG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnfi9tb2R1bGVzL2ZpcmViYXNlJ1xuaW1wb3J0ICdmaXJlYmFzZS9mdW5jdGlvbnMnXG5cbmNvbnN0IFRlbXBsYXRlOiBGQyA9ICgpID0+IHtcbiAgY29uc3QgdWlkID0gdXNlUmVjb2lsVmFsdWUoYXV0aFN0YXRlKVxuICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBzaWduSW4gPSB1c2VDYWxsYmFjaygoKT0+e1xuICAgIGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpO1xuICB9LFtlbWFpbCwgcGFzc3dvcmRdKVxuICBjb25zdCBnZXRUb2tlbiA9IHVzZUNhbGxiYWNrKCgpPT57XG4gICAgZmlyZWJhc2UuZnVuY3Rpb25zKCkuaHR0cHNDYWxsYWJsZShcImh0dHAtc2Vzc2lvbkNvb2tpZVwiKVxuICB9LFtdKVxuICByZXR1cm4gPD57dWlkID8gPD5cbiAgPGJ1dHRvbiBvbkNsaWNrPXtnZXRUb2tlbn0+Z2V0IHRva2VuPC9idXR0b24+IDwvPiA6IDw+XG4gIDxpbnB1dCB0eXBlPVwibWFpbFwiIHBsYWNlaG9sZGVyPVwibWFpbFwiIG9uQ2hhbmdlPXtlPT5zZXRFbWFpbChlLnRhcmdldC52YWx1ZSl9IHZhbHVlPXtlbWFpbH0vPlxuICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJwYXNzd29yZFwiIG9uQ2hhbmdlPXtlPT5zZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSl9IHZhbHVlPXtwYXNzd29yZH0vPlxuICA8YnV0dG9uIG9uQ2xpY2s9e3NpZ25Jbn0+c2lnbmluPC9idXR0b24+XG4gIDwvPn08Lz5cbn0gXG5cbmV4cG9ydCBkZWZhdWx0IFRlbXBsYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/templates/home.tsx\n");

/***/ })

})