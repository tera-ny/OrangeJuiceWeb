{"ast":null,"code":"import { serialize } from 'cookie';\n\n/**\n * This sets `cookie` using the `res` object\n */\nconst setCookie = (res, name, value, options = {}) => {\n  const stringValue = typeof value === 'object' ? 'j:' + JSON.stringify(value) : String(value);\n\n  if ('maxAge' in options) {\n    options.expires = new Date(Date.now() + options.maxAge);\n    options.maxAge /= 1000;\n  }\n\n  res.setHeader('Set-Cookie', serialize(name, String(stringValue), options));\n};\n\nconst handler = (req, res) => {\n  // Calling our pure function using the `res` object, it will add the `set-cookie` header\n  setCookie(res, 'Next.js', 'api-middleware!'); // Return the `set-cookie` header so we can display it in the browser and show that it works!\n\n  res.end(res.getHeader('Set-Cookie'));\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/teranyan/workspace/OrangeJuiceWeb/src/pages/api/session.ts"],"names":["serialize","setCookie","res","name","value","options","stringValue","JSON","stringify","String","expires","Date","now","maxAge","setHeader","handler","req","end","getHeader"],"mappings":"AAAA,SAASA,SAAT,QAAkD,QAAlD;;AAGA;AACA;AACA;AAEA,MAAMC,SAAS,GAAG,CAChBC,GADgB,EAEhBC,IAFgB,EAGhBC,KAHgB,EAIhBC,OAA+B,GAAG,EAJlB,KAKb;AACH,QAAMC,WAAW,GACf,OAAOF,KAAP,KAAiB,QAAjB,GAA4B,OAAOG,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAnC,GAA2DK,MAAM,CAACL,KAAD,CADnE;;AAGA,MAAI,YAAYC,OAAhB,EAAyB;AACvBA,IAAAA,OAAO,CAACK,OAAR,GAAkB,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaP,OAAO,CAACQ,MAA9B,CAAlB;AACAR,IAAAA,OAAO,CAACQ,MAAR,IAAkB,IAAlB;AACD;;AAEDX,EAAAA,GAAG,CAACY,SAAJ,CAAc,YAAd,EAA4Bd,SAAS,CAACG,IAAD,EAAOM,MAAM,CAACH,WAAD,CAAb,EAA4BD,OAA5B,CAArC;AACD,CAfD;;AAiBA,MAAMU,OAAuB,GAAG,CAACC,GAAD,EAAMd,GAAN,KAAc;AAC5C;AACAD,EAAAA,SAAS,CAACC,GAAD,EAAM,SAAN,EAAiB,iBAAjB,CAAT,CAF4C,CAG5C;;AACAA,EAAAA,GAAG,CAACe,GAAJ,CAAQf,GAAG,CAACgB,SAAJ,CAAc,YAAd,CAAR;AACD,CALD;;AAOA,eAAeH,OAAf","sourcesContent":["import { serialize, CookieSerializeOptions } from 'cookie'\nimport { NextApiResponse, NextApiHandler } from 'next'\n\n/**\n * This sets `cookie` using the `res` object\n */\n\nconst setCookie = (\n  res: NextApiResponse,\n  name: string,\n  value: unknown,\n  options: CookieSerializeOptions = {}\n) => {\n  const stringValue =\n    typeof value === 'object' ? 'j:' + JSON.stringify(value) : String(value)\n\n  if ('maxAge' in options) {\n    options.expires = new Date(Date.now() + options.maxAge)\n    options.maxAge /= 1000\n  }\n\n  res.setHeader('Set-Cookie', serialize(name, String(stringValue), options))\n}\n\nconst handler: NextApiHandler = (req, res) => {\n  // Calling our pure function using the `res` object, it will add the `set-cookie` header\n  setCookie(res, 'Next.js', 'api-middleware!')\n  // Return the `set-cookie` header so we can display it in the browser and show that it works!\n  res.end(res.getHeader('Set-Cookie'))\n}\n\nexport default handler"]},"metadata":{},"sourceType":"module"}